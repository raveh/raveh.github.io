<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Raveh&#39;s</title>
    <link>/tags/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Raveh&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Oct 2022 12:31:17 +0800</lastBuildDate><atom:link href="/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>贪吃蛇</title>
      <link>/221013/</link>
      <pubDate>Thu, 13 Oct 2022 12:31:17 +0800</pubDate>
      
      <guid>/221013/</guid>
      <description>国庆期间看了raylib绘图库，打算用这个库写几个复古小游戏，这是第一个贪吃蛇(不支持XP，支持win7以上操作系统)。 代码如下： 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>Git笔记</title>
      <link>/220809/</link>
      <pubDate>Tue, 09 Aug 2022 12:43:22 +0800</pubDate>
      
      <guid>/220809/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 # 克隆项目到本地 git clone 项目地址 # checkout到develop分支 git checkout develop # 添加变更 git add * # 提交到本地 git commit -m &amp;#34</description>
    </item>
    
    <item>
      <title>左值右值</title>
      <link>/220805/</link>
      <pubDate>Fri, 05 Aug 2022 13:48:33 +0800</pubDate>
      
      <guid>/220805/</guid>
      <description>众所周知C++11新增了右值引用，谈右值引用我们也可以扩展一些相关概念： 左值 右值 纯右值 将亡值 左值引用 右值引用 移动语义 完美转发 返回值优化 我们下</description>
    </item>
    
    <item>
      <title>结构体位域</title>
      <link>/220723/</link>
      <pubDate>Sat, 23 Jul 2022 04:03:25 +0100</pubDate>
      
      <guid>/220723/</guid>
      <description>C或C++允许在结构体中以位为单位设置成员所占的内存空间，以位为单位的结构体成员，简称为位域或位段(Bit field)。位域的优点是节省空间</description>
    </item>
    
    <item>
      <title>二叉树练习</title>
      <link>/220409/</link>
      <pubDate>Sat, 09 Apr 2022 02:42:22 +0100</pubDate>
      
      <guid>/220409/</guid>
      <description>主要是遍历，二叉搜索树的基础。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55</description>
    </item>
    
    <item>
      <title>单链表练习</title>
      <link>/220408/</link>
      <pubDate>Fri, 08 Apr 2022 02:36:35 +0100</pubDate>
      
      <guid>/220408/</guid>
      <description>直接贴代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64</description>
    </item>
    
    <item>
      <title>C结构体定义</title>
      <link>/220305/</link>
      <pubDate>Sat, 05 Mar 2022 02:06:46 +0000</pubDate>
      
      <guid>/220305/</guid>
      <description>平常看C语言的程序时，见到结构体定义有些是使用typedef定义，有些是直接使用struct定义，感觉有点混乱，其实简单梳理下就很清楚了。 使</description>
    </item>
    
    <item>
      <title>C函数指针</title>
      <link>/220303/</link>
      <pubDate>Thu, 03 Mar 2022 04:06:02 +0000</pubDate>
      
      <guid>/220303/</guid>
      <description>在C语言中，函数存放在内存的代码区，跟基本的数据类型或者数组一样，也有一个内存的起始位置。函数的类型由其参数以及返回类型共同决定，跟函数名无</description>
    </item>
    
    <item>
      <title>C&#43;&#43;信号处理</title>
      <link>/220224/</link>
      <pubDate>Thu, 24 Feb 2022 14:37:45 +0000</pubDate>
      
      <guid>/220224/</guid>
      <description>信号是由操作系统传给进程的中断，会提早终止一个程序。在 LINUX 或 Windows 系统上，可以通过按 Ctrl+C 产生中断。有些信号不能被程序捕获，但是下表所列信号可以在程序</description>
    </item>
    
    <item>
      <title>C&#43;&#43;函数的值传递、指针传递、引用传递</title>
      <link>/220222/</link>
      <pubDate>Tue, 22 Feb 2022 08:26:44 +0000</pubDate>
      
      <guid>/220222/</guid>
      <description>函数的三种参数 值传递 形参是实参的拷贝，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参-&amp;gt;形参），参数</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;内存分配方式与存储区</title>
      <link>/220221/</link>
      <pubDate>Mon, 21 Feb 2022 18:26:42 +0000</pubDate>
      
      <guid>/220221/</guid>
      <description>三种内存分配方式 从静态存储区域分配。内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，static变量。 在</description>
    </item>
    
    <item>
      <title>学习C&#43;&#43;/Cherno笔记</title>
      <link>/220220/</link>
      <pubDate>Sun, 20 Feb 2022 10:02:39 +0000</pubDate>
      
      <guid>/220220/</guid>
      <description>最近开始看Cherno的C++视频，受益匪浅，记录下笔记： No.1 vs有两种默认运行方式，debug或release，其中在项目的C++属性栏中，</description>
    </item>
    
    <item>
      <title>多网卡配置</title>
      <link>/200320/</link>
      <pubDate>Fri, 20 Mar 2020 12:02:48 +0000</pubDate>
      
      <guid>/200320/</guid>
      <description>Windows多网卡路由配置常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #例子1：要显示IP路由表的完整内容 route print #例子2：要显示IP路由</description>
    </item>
    
    <item>
      <title>SSH链接管理脚本</title>
      <link>/200318/</link>
      <pubDate>Wed, 18 Mar 2020 02:13:30 +0000</pubDate>
      
      <guid>/200318/</guid>
      <description>平常维护linux机器比较多，很多时候都要临时通过SSH登上去，执行一些命令什么的，写了一个Bash Shell脚本管理这些链接，有需要的可以</description>
    </item>
    
  </channel>
</rss>
